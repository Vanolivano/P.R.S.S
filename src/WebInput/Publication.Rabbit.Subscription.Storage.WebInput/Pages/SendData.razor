@page "/"

<PageTitle>Person input</PageTitle>

@using Publication.Rabbit.Subscription.Storage.WebInput.Data
@using Publication.Rabbit.Subscription.Storage.Models
@using Publication.Rabbit.Subscription.Storage.RmqPublisher.Facade
@using Publication.Rabbit.Subscription.Storage.Notifications.Facade
@using Dev.Tools.Results
@inject IRmqPublisherClient _rmqPublisherClient
@inject INotificationClient _notificationClient

<h1>Person input</h1>

<p>This component demonstrates input and sending data to another service.</p>
<EditForm Model="_personModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="nameId">Name</label>
        <input @bind="_personModel.Name" type="text" class="form-control" id="nameId" placeholder="Enter name">
    </div>

    <div class="form-group">
        <label for="ageId">Age</label>
        <input @bind="_personModel.Age" type="number" class="form-control" id="ageId" placeholder="Enter age">
    </div>

    <div class="form-group">
        <label for="genderId">Gender</label>
        <InputSelect @bind-Value="_personModel.Gender" id="genderId" class="form-control">
            @foreach (var gender in Enum.GetValues<Gender>())
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="birthDateId">BirthDate</label>
        <input @bind="_personModel.BirthDate" @bind:format="yyyy-MM-dd" type="date" class="form-control" id="birthDateId" placeholder="Enter age">
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>


    @if (Result?.ErrorData != null)
    {
        <p class="blazor-error-boundary">
            @Result.ErrorData.ErrorMessage
        </p>
    }
    @if (Result?.Succeeded == true)
    {
        <p class="alert-info align-content-center">
            Data has been sent successfully.
        </p>
    }
</EditForm>

<NotificationComponent />

@code {
    private readonly PersonModel _personModel = new();
    private ISuccessData Result { get; set; }

    protected override void OnInitialized()
    {
        _personModel.BirthDate = new DateTime(2002, 01, 01);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Result = null;
    }

    private async Task HandleValidSubmit()
    {
        Result = await _rmqPublisherClient.SendData(_personModel);
        if(Result.Succeeded == false) return;
        Result = await _notificationClient.PushMessageAsync("Data has been sended to RmqPublisher from WebInput");
    }
}